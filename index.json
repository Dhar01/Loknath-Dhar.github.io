[{"content":"Hello There Welcome to my blog!\nI am Loknath Dhar, a Linux Enthusiast.\nAspire to become Linux System Administrator and want to find a way into infosec.\nThis blog is used to share knowledge/ideas of mine.\n Music, Movies, Anime, Books, Football \u0026amp; Linux\n That\u0026rsquo;s me.\nPersonal favorite/Things I prefer: (I\u0026rsquo;m not sure if this section is right or not but I think it\u0026rsquo;s fun so why not!)\n Coding: Python, C++ OS: Pop!_OS Browser: Firefox Text Editor: Neovim Bengali Font: Atma Video Software: mpv Football Club: Liverpool Anime: Attack on Titan  About Blog  Static website generator: Hugo Theme of the website: hugo-PaperMod Host: GitHub Blog is deployed with GitHub Pages. For photos: Unsplash, Pexels For icons: Simple Icons  ","permalink":"https://dhar01.github.io/about/","summary":"Hello There Welcome to my blog!\nI am Loknath Dhar, a Linux Enthusiast.\nAspire to become Linux System Administrator and want to find a way into infosec.\nThis blog is used to share knowledge/ideas of mine.\n Music, Movies, Anime, Books, Football \u0026amp; Linux\n That\u0026rsquo;s me.\nPersonal favorite/Things I prefer: (I\u0026rsquo;m not sure if this section is right or not but I think it\u0026rsquo;s fun so why not!)\n Coding: Python, C++ OS: Pop!","title":"About"},{"content":"In my Computer Graphics class, the teacher asked us to setup Codeblocks for the glut. She gave us a tutorial on how to setup Codeblocks on windows but didn\u0026rsquo;t provide any suggestion to set up on Linux. After some searching on google, I was able to setup Codeblocks with Freeglut (which is an alternative to Glut and available on Linux). This is a kind of writeup (or tutorial) on how I was able to setup Codeblocks with Freeglut.\n This setup is tested and working on Pop os, as of writing, should be working with Ubuntu/Debian with the latest Codeblocks.\n Also, I linked to the posts from where I collect these and setup Codeblocks to work properly.\nInstallation Part To work with all of these, of course, we have to install all the necessary files.\nFor Freeglut:\nsudo apt install g++ freeglut3 freeglut3-dev sudo apt install libxmu-dev libxi-dev For Codeblocks:\nsudo apt install codeblocks For OpenGL:\nsudo apt install build-essential libgl1-mesa-dev sudo apt install libglew-dev libsdl2-dev libsdl2-image-dev libglm-dev libfreetype6-dev # some libraries Check OpenGL installation:\nglxinfo | grep OpenGL Setup Part Open Codeblocks, go to settings \u0026gt; Global Variables. Click new, it should look like this:\ntype freeglut, press ok and setup the rest like this:\nNow close the Codeblocks.\nResting part is collected from here.\n Go to /usr/share/codeblocks/templates, create the file freeglut.cbp and put the following code there:  \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;yes\u0026quot; ?\u0026gt; \u0026lt;CodeBlocks_project_file\u0026gt; \u0026lt;FileVersion major=\u0026quot;1\u0026quot; minor=\u0026quot;4\u0026quot; /\u0026gt; \u0026lt;Project\u0026gt; \u0026lt;Option title=\u0026quot;freeglut\u0026quot; /\u0026gt; \u0026lt;Option pch_mode=\u0026quot;0\u0026quot; /\u0026gt; \u0026lt;Option compiler=\u0026quot;gcc\u0026quot; /\u0026gt; \u0026lt;Build\u0026gt; \u0026lt;Target title=\u0026quot;default\u0026quot;\u0026gt; \u0026lt;Option output=\u0026quot;freeglut.exe\u0026quot; /\u0026gt; \u0026lt;Option type=\u0026quot;0\u0026quot; /\u0026gt; \u0026lt;Option compiler=\u0026quot;gcc\u0026quot; /\u0026gt; \u0026lt;Option includeInTargetAll=\u0026quot;1\u0026quot; /\u0026gt; \u0026lt;/Target\u0026gt; \u0026lt;/Build\u0026gt; \u0026lt;Compiler\u0026gt; \u0026lt;Add directory=\u0026quot;$(#freeglut.include)\u0026quot; /\u0026gt; \u0026lt;/Compiler\u0026gt; \u0026lt;Linker\u0026gt; \u0026lt;Add library=\u0026quot;freeglut\u0026quot; /\u0026gt; \u0026lt;Add library=\u0026quot;glu32\u0026quot; /\u0026gt; \u0026lt;Add library=\u0026quot;opengl32\u0026quot; /\u0026gt; \u0026lt;Add library=\u0026quot;winmm\u0026quot; /\u0026gt; \u0026lt;Add library=\u0026quot;gdi32\u0026quot; /\u0026gt; \u0026lt;Add library=\u0026quot;user32\u0026quot; /\u0026gt; \u0026lt;Add library=\u0026quot;kernel32\u0026quot; /\u0026gt; \u0026lt;Add directory=\u0026quot;$(#freeglut.lib)\u0026quot; /\u0026gt; \u0026lt;/Linker\u0026gt; \u0026lt;Unit filename=\u0026quot;main.cpp\u0026quot;\u0026gt; \u0026lt;Option compilerVar=\u0026quot;CPP\u0026quot; /\u0026gt; \u0026lt;Option target=\u0026quot;default\u0026quot; /\u0026gt; \u0026lt;/Unit\u0026gt; \u0026lt;/Project\u0026gt; \u0026lt;/CodeBlocks_project_file\u0026gt; Save it.\n  Create a directory named freeglut on /usr/share/codeblocks/templates/wizard/. You will find another directory named glut there. Copy all the contents and paste it on the newly created freeglut directory.\n  Now go to the created freeglut directory, edit the wizard.script file and paste the following:\n  //////////////////////////////////////////////////////////////////////////////// // // FreeGLUT project wizard // //////////////////////////////////////////////////////////////////////////////// // globals FreeGlutPathDefault \u0026lt;- _T(\u0026quot;$(#freeglut)\u0026quot;); FreeGlutPathDefaultInc \u0026lt;- _T(\u0026quot;$(#freeglut.include)\u0026quot;); FreeGlutPathDefaultLib \u0026lt;- _T(\u0026quot;$(#freeglut.lib)\u0026quot;); FreeGlutPath \u0026lt;- _T(\u0026quot;\u0026quot;); function BeginWizard() { local intro_msg = _T(\u0026quot;Welcome to the new FreeGLUT project wizard!\\n\\n\u0026quot; + \u0026quot;This wizard will guide you to create a new project\\n\u0026quot; + \u0026quot;using the FreeGLUT OpenGL extensions.\\n\\n\u0026quot; + \u0026quot;When you 're ready to proceed, please click \\\u0026quot;Next\\\u0026quot;...\u0026quot;); local glutpath_descr = _T(\u0026quot;Please select the location of FreeGLUT on your computer.\\n\u0026quot; + \u0026quot;This is the top-level folder where FreeGLUT was installed (unpacked).\\n\u0026quot; + \u0026quot;To help you, this folder must contain the subfolders\\n\u0026quot; + \u0026quot;\\\u0026quot;include\\\u0026quot; and \\\u0026quot;lib\\\u0026quot;.\u0026quot;); Wizard.AddInfoPage(_T(\u0026quot;GlutIntro\u0026quot;), intro_msg); Wizard.AddProjectPathPage(); if (PLATFORM == PLATFORM_MAC) { FreeGlutPathDefault=\u0026quot;/System/Library/Frameworks/FreeGLUT.framework\u0026quot;; } else Wizard.AddGenericSelectPathPage(_T(\u0026quot;FreeGlutPath\u0026quot;), glutpath_descr, _T(\u0026quot;Please select FreeGLUT's location:\u0026quot;), FreeGlutPathDefault); Wizard.AddCompilerPage(_T(\u0026quot;\u0026quot;), _T(\u0026quot;*\u0026quot;), true, true); } //////////////////////////////////////////////////////////////////////////////// // GLUT's path page //////////////////////////////////////////////////////////////////////////////// function OnLeave_GlutPath(fwd) { if (fwd) { local dir = Wizard.GetTextControlValue(_T(\u0026quot;txtFolder\u0026quot;)); // txtFolder is the text control in GenericSelectPathPage local dir_nomacro = VerifyDirectory(dir); if (dir_nomacro.IsEmpty()) return false; // verify include dependencies local dir_nomacro_inc = GetCompilerIncludeDir(dir, FreeGlutPathDefault, FreeGlutPathDefaultInc); if (dir_nomacro_inc.IsEmpty()) return false; if (!VerifyFile(dir_nomacro_inc + wxFILE_SEP_PATH + _T(\u0026quot;GL\u0026quot;), _T(\u0026quot;freeglut.h\u0026quot;), _T(\u0026quot;FreeGLUT's include\u0026quot;))) return false; // verify library dependencies local dir_nomacro_lib = GetCompilerLibDir(dir, FreeGlutPathDefault, FreeGlutPathDefaultLib); if (dir_nomacro_lib.IsEmpty()) return false; if (PLATFORM == PLATFORM_MSW) { if (!VerifyLibFile(dir_nomacro_lib, _T(\u0026quot;freeglut\u0026quot;), _T(\u0026quot;FreeGLUT's\u0026quot;))) return false; } else { if (!VerifyLibFile(dir_nomacro_lib, _T(\u0026quot;freeglut\u0026quot;), _T(\u0026quot;FreeGLUT's\u0026quot;))) return false; } FreeGlutPath = dir; // Remember the original selection. local is_macro = _T(\u0026quot;\u0026quot;); // try to resolve the include directory as macro is_macro = GetCompilerIncludeMacro(dir, FreeGlutPathDefault, FreeGlutPathDefaultInc); if (is_macro.IsEmpty()) { // not possible -\u0026gt; use the real inc path we had computed instead FreeGlutPathDefaultInc = dir_nomacro_inc; } // try to resolve the library directory as macro is_macro = GetCompilerLibMacro(dir, FreeGlutPathDefault, FreeGlutPathDefaultLib); if (is_macro.IsEmpty()) { // not possible -\u0026gt; use the real lib path we had computed instead FreeGlutPathDefaultLib = dir_nomacro_lib; } } return true; } // return the files this project contains function GetFilesDir() { return _T(\u0026quot;glut/files\u0026quot;); } // setup the already created project function SetupProject(project) { // set project options if (PLATFORM != PLATFORM_MAC) { project.AddIncludeDir(FreeGlutPathDefaultInc); project.AddLibDir(FreeGlutPathDefaultLib); } // add link libraries if (PLATFORM == PLATFORM_MSW) { project.AddLinkLib(_T(\u0026quot;freeglut\u0026quot;)); project.AddLinkLib(_T(\u0026quot;opengl32\u0026quot;)); project.AddLinkLib(_T(\u0026quot;glu32\u0026quot;)); project.AddLinkLib(_T(\u0026quot;winmm\u0026quot;)); project.AddLinkLib(_T(\u0026quot;gdi32\u0026quot;)); } else if (PLATFORM == PLATFORM_MAC) { project.AddLinkerOption(_T(\u0026quot;-framework GLUT\u0026quot;)); project.AddLinkerOption(_T(\u0026quot;-framework OpenGL\u0026quot;)); project.AddLinkerOption(_T(\u0026quot;-framework Cocoa\u0026quot;)); // GLUT dependency } else { project.AddLinkLib(_T(\u0026quot;glut\u0026quot;)); project.AddLinkLib(_T(\u0026quot;GL\u0026quot;)); project.AddLinkLib(_T(\u0026quot;GLU\u0026quot;)); project.AddLinkLib(_T(\u0026quot;Xxf86vm\u0026quot;)); } // enable compiler warnings (project-wide) WarningsOn(project, Wizard.GetCompilerID()); // Debug local target = project.GetBuildTarget(Wizard.GetDebugName()); if (!IsNull(target)) { target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE); target.SetWorkingDir(FreeGlutPath + _T(\u0026quot;/bin\u0026quot;)); // enable generation of debugging symbols for target DebugSymbolsOn(target, Wizard.GetCompilerID()); } // Release target = project.GetBuildTarget(Wizard.GetReleaseName()); if (!IsNull(target)) { target.SetTargetType(ttExecutable); // ttExecutable: no console target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE); target.SetWorkingDir(FreeGlutPath + _T(\u0026quot;/bin\u0026quot;)); // enable optimizations for target OptimizationsOn(target, Wizard.GetCompilerID()); } return true; } Save it.\n Now on /usr/share/codeblocks/templates/wizard directory, there is a script named config.script and add the following line at the end of the file:  RegisterWizard(wizProject, _T(\u0026quot;freeglut\u0026quot;), _T(\u0026quot;FreeGLUT project\u0026quot;), _T(\u0026quot;2D/3D Graphics\u0026quot;));  Now go to this link, this is the Freeglut project\u0026rsquo;s source files, download the latest stable:   Extract it. Copy the contents of the extracted folder and paste it on the /usr/share/codeblocks/templates/wizard/freeglut directory. At the time of writing, it looks like this:  Codeblocks Setup Part If everything goes well/correctly, Codeblocks should be open without warning/showing any errors.\n Open Codeblocks. Go to File \u0026gt; New \u0026gt; Projects and this dialog should be showing with Freeglut Project:   Give a name of the project as you see fit:   Then, specify the location where the Freeglut is:   Leave the next dialog as it is (don\u0026rsquo;t change anything):  At this moment your Codeblocks should be ready for the Freeglut projects.\nFinal Part Just checking if things are working or not.\n Go to sources, there should be a main.cpp file for test running:   Build and Run!  That\u0026rsquo;s it.\nOkay, that\u0026rsquo;s all. Hope, everything works fine. See ya later!\n","permalink":"https://dhar01.github.io/posts/codeblocks-with-freeglut-linux/","summary":"In my Computer Graphics class, the teacher asked us to setup Codeblocks for the glut. She gave us a tutorial on how to setup Codeblocks on windows but didn\u0026rsquo;t provide any suggestion to set up on Linux. After some searching on google, I was able to setup Codeblocks with Freeglut (which is an alternative to Glut and available on Linux). This is a kind of writeup (or tutorial) on how I was able to setup Codeblocks with Freeglut.","title":"Setting up Codeblocks with Freeglut on Linux"},{"content":"Task 2 A DNS request is made. When browser knows the server\u0026rsquo;s IP address, it ask the server for the web page which is done with a HTTP GET request.\nGET is an example of a HTTP verb, which are the different types of request. The server responds to the GET request with the web page content. IF the web page is loading extra resources, like JavaScript, images, or CSS files, those will be retrieved in separate GET requests.\nFor most websites now, these request will use HTTPS, a secure (encrypted) version of HTTP. This uses TLS 1.3 (normally) encryption in order to communicate without:\n other parties being able to read the data. other parties being able to modify the data.  A web server is a software that receives and responds to HTTP(S) requests. Example: Apache, Nginx, Microsoft\u0026rsquo;s IIS.\nHTTP runs on port 80 and HTTPS runs on port 443.\n What request verb is used to retrieve page content?  Ans: GET.\n What port do web servers normally listen on?  Ans: 80.\n What\u0026rsquo;s responsible for making websites look fancy?  Ans: CSS.\nTask 3 Requests There are 9 different HTTP \u0026ldquo;verbs\u0026rdquo;, also known as methods. Each one has a different function.\nPOST requests are used to send data to a web server.\nA HTTP request can be broken down into parts.\nGET /index.html The next section is headers, which give the server more information about requests.\nFinally, body of the requests. For POST requests, this is the content that\u0026rsquo;s sent to the server.\nResponses The server reply with a response, a status. Normally it\u0026rsquo;ll be a code. A basic breakdown of the status code is:\n 100-199 : information. 200-299 : Successes. (200 OK is the \u0026ldquo;normal\u0026rdquo; response for a GET) 300-399 : Redirects (the information you want is elsewhere) 400-499 : Client errors (client did something wrong, like asking for something that doesn\u0026rsquo;t exist) 500-599 : server errors (server tried, but something went wrong on their side)   What verb would be used for a login?  Ans: POST.\n What verb would be used to see your bank balance once you\u0026rsquo;re logged in?  Ans: GET.\n Does the body of a GET request matter? Yea/Nay  Ans: Nay.\n What\u0026rsquo;s the status code for \u0026ldquo;I\u0026rsquo;m a teapot\u0026rdquo;?  Ans: 418.\n What status code will you get if you need to authenticate to access some content, and you\u0026rsquo;re unauthenticated?  Ans: 401.\nTask 4 Cookies are small bits of data that are stored in browser.\nEach browser store them differently, so cookies won\u0026rsquo;t be able to another browser. They have a huge number of uses, but most common are either session management or advertising (tracking cookies). Cookies are normally sent with every HTTP request made to server.\nAs HTTP is stateless (each request is independent and no state is tracked internally), cookies are used to keep track of this. They allow sites to keep track of data.\nCookies have:\n a name : identifies the cookie. a value : where data is stored. an expiry date : when the browser will get rid of the cookie automatically. a path : what requests the cookie will be sent with.  The server is normally what sets cookies, and those come in the response headers (Set-Cookie). These can be set from javascript inside browser.\nWhen log in to a web application, normally they given a Session token. This allows the web server to identify requests. Stealing someone else\u0026rsquo;s session token can often allow to impersonate them.\nTask 5 We can make HTTP reques in many ways, including without browsers. For CTFs, we\u0026rsquo;ll ned to use cURL or a programming language as this allows to automate repetitive tasks.\nBy default, curl will perform GET requests on whatever URL it get suppplied, such as curl https://tryhackme.com\nThis will retrieve the main page of that website. With command line flags, we can do:\n The -X flag allows to specify the request type. Ex: -X POST. The \u0026ndash;data flag allows to specify the data to POST with, which default to plain text data.  Time for mini Ctf! There are some mentioned tasks on the ctf room. By connecting to the server with curl, we can get the flag for answers.\n What\u0026rsquo;s the GET flag?  Ans: thm{162520bec925bd7979e9ae65a725f99f}\n What\u0026rsquo;s the POST flag?  Ans: thm{3517c902e22def9c6e09b99a9040ba09}\n What\u0026rsquo;s the POST flag?  Ans: thm{91b1ac2606f36b935f465558213d7ebd}\n What\u0026rsquo;s the \u0026ldquo;Set a cookie\u0026rdquo; flag?  Ans: thm{c10b5cb7546f359d19c747db2d0f47b3}\n Note 1: the web site IP address my be differ from deployed machine. That\u0026rsquo;s why I hide it, enter the IP address you get from the room.\n  Note 2: I heard this room was subscirber only, but at the time of writing, it is completely free.\n ","permalink":"https://dhar01.github.io/posts/web-fundamentals-walkthrough/","summary":"Task 2 A DNS request is made. When browser knows the server\u0026rsquo;s IP address, it ask the server for the web page which is done with a HTTP GET request.\nGET is an example of a HTTP verb, which are the different types of request. The server responds to the GET request with the web page content. IF the web page is loading extra resources, like JavaScript, images, or CSS files, those will be retrieved in separate GET requests.","title":"Web Fundamentals walk-through [TryHackMe]"},{"content":"Shodan.io is a search engine for the internet of things. There is a room about Shodan in Tryhackme and this walk-through is about that.\n Due to the nature of Shodan and its scanning services, the answer is changing all the time. So keep trying.\n Task 01 An autonomous system number (ASN) is a global identifier of a range of IP addresses. Basically, large companies like Google, Microsoft have their own ASN for all of the IP addresses they own.\nTo find out ASN, first, we can search their IP address: ping google.com\nWe can put the IP address into an ASN lookup tool such as ultralools/asninfo\nThough, we can put the company name here to find the ASN, using the IP address seems the easiest one to me.\nOn shodan, we can search using the ASN filter. The filter is: ASN:[number] here, the number is marked on the picture.\nTask 02  What is Google\u0026rsquo;s ASN number?  Ans: You know it now. ;)\n When it was allocated?  Ans: Again, look at the details.\n Where are most of the machines on this ASN number, physically in the world?  Ans: United States.\n What is Google\u0026rsquo;s top service across all their devices on this ASN?  Ans: SSH.\n What SSH product does Google use?  Ans: OpenSSH.\n What is Google\u0026rsquo;s most used Google product, according to this search? Ignore the word \u0026ldquo;Google\u0026rdquo;.  Ans: Cloud.\nTask 03 Here is a list of filters for shodan:\n product: product Name (ex: MySQL) city country Geo (co-ordinates) Hostname net (based on IP/CIDR) os (find operating systems) port before/after (time-frames)  Task 04  What is the top operating system for MYSQL servers in Google\u0026rsquo;s ASN?  Ans: 5.6.40–84.0-log\n What is the 2nd most popular country for MYSQL servers in Google\u0026rsquo;s ASN?  Ans: Netherlands.\n Under Google\u0026rsquo;s ASN, which is more popular for nginx, Hypertext Transfer Protocol, or Hypertext Transfer Protocol(s)?  Ans: HyperText Transfer Protocol.\nPort 80 stands for HTTP; port 443 stands for HTTPs.\n Under Google\u0026rsquo;s ASN, what is the most popular city?  Ans: Mountain View. (answer changes time to time)\n Under Google\u0026rsquo;s ASN in Los Angeles, what is the top operating system according to Shodan?  Ans: PAN-OS. (answer changes time to time)\n Using the top Webcam search from the explore page, does Google\u0026rsquo;s ASN have any webcams? Yay / nay.  Ans: Nay.\nTask 05 Shodan has a limit on the free user account. It has an API, use it for more searches.\n","permalink":"https://dhar01.github.io/posts/shodan-walkthrough/","summary":"Shodan.io is a search engine for the internet of things. There is a room about Shodan in Tryhackme and this walk-through is about that.\n Due to the nature of Shodan and its scanning services, the answer is changing all the time. So keep trying.\n Task 01 An autonomous system number (ASN) is a global identifier of a range of IP addresses. Basically, large companies like Google, Microsoft have their own ASN for all of the IP addresses they own.","title":"Shodan.io Walk-through [Tryhackme]"}]